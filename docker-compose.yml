version: '3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: 
      - kafka-network
  kafka_0:
    image: wurstmeister/kafka:latest
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      KAFKA_CREATE_TOPICS: "iot-data:3:3"
    networks: 
      - kafka-network
  kafka_1:
    image: wurstmeister/kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9094:9094
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_1:29093,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENERS: PLAINTEXT://:29093,PLAINTEXT_HOST://:9094
      KAFKA_CREATE_TOPICS: "iot-data:3:3"
    networks: 
      - kafka-network
  kafka_2:
    image: wurstmeister/kafka:latest
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - 9095:9095
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_2:29094,PLAINTEXT_HOST://localhost:9095
      KAFKA_LISTENERS: PLAINTEXT://:29094,PLAINTEXT_HOST://:9095
      KAFKA_CREATE_TOPICS: "iot-data:3:3"
    networks: 
      - kafka-network
  timescaledb:
    image: timescale/timescaledb:latest-pg12
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
    networks:
      - db-network
  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka_0:29092,kafka_1:29093, kafka_2:29094"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka_0"
      - "kafka_1"  
      - "kafka_2"
    networks:
      - kafka-network
  producer-api:
    image: flaviosolci/iot-services:producer-latest
    restart: unless-stopped
    ports:
     - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - app-network
      - kafka-network
    depends_on:
      - kafka_0
  consumer-api:
    image: flaviosolci/iot-services:consumer-latest
    restart: unless-stopped
    ports:
     - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - app-network
      - kafka-network
      - db-network
    depends_on:
      - kafka_0
      - timescaledb

networks:
  kafka-network:
  app-network:
  db-network: